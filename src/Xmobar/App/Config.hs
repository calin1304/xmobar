{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BlockArguments #-}
------------------------------------------------------------------------------
-- |
-- Module: Xmobar.Config.Defaults
-- Copyright: (c) 2018, 2019, 2020 Jose Antonio Ortega Ruiz
-- License: BSD3-style (see LICENSE)
--
-- Maintainer: jao@gnu.org
-- Stability: unstable
-- Portability: portable
-- Created: Sun Nov 25, 2018 22:26
--
--
-- Default values for Xmobar configurations and functions to access
-- configuration files and directories.
--
------------------------------------------------------------------------------


module Xmobar.App.Config (defaultConfig,
                          xmobarDataDir,
                          xmobarConfigFile) where

import Control.Monad (when, filterM)
import Data.Functor ((<&>))
import Data.Maybe (catMaybes, listToMaybe)

import System.Environment
import System.Directory
import System.FilePath ((</>))
import System.Posix.Files (fileExist)

import Xmobar.Plugins.Date
import Xmobar.Plugins.StdinReader
import Xmobar.Config.Types
import Xmobar.Run.Runnable

-- | The default configuration values
defaultConfig :: Config
defaultConfig =
    Config { font = "-misc-fixed-*-*-*-*-10-*-*-*-*-*-*-*"
           , additionalFonts = []
           , wmClass = "xmobar"
           , wmName = "xmobar"
           , bgColor = "#000000"
           , fgColor = "#BFBFBF"
           , alpha   = 255
           , position = Top
           , border = NoBorder
           , borderColor = "#BFBFBF"
           , borderWidth = 1
           , textOffset = -1
           , iconOffset = -1
           , textOffsets = []
           , hideOnStart = False
           , lowerOnStart = True
           , persistent = False
           , allDesktops = True
           , overrideRedirect = True
           , pickBroadest = False
           , iconRoot = "."
           , commands = [ Run $ Date "%a %b %_d %Y * %H:%M:%S" "theDate" 10
                        , Run StdinReader]
           , sepChar = "%"
           , alignSep = "}{"
           , template = "%StdinReader% }{ " ++
                        "<fc=#00FF00>%uname%</fc> * <fc=#FF0000>%theDate%</fc>"
           , verbose = False
           }

-- | Return the path to the xmobar data directory.  This directory is
-- used by Xmobar to store data files such as the run-time state file
-- and the configuration binary generated by GHC.
--
-- Several directories are considered.  In order of preference:
--
--   1. The directory specified in the @XMOBAR_DATA_DIR@ environment variable.
--   2. The @XDG_DATA_HOME/xmobar@ directory.
--   3. The @~\/.xmobar@ directory.
--
-- The first directory that exists will be used.  If none of the
-- directories exist then (1) will be used if it is set, otherwise (2)
-- will be used.  Either way, a directory will be created if
-- necessary.
xmobarDataDir :: IO String
xmobarDataDir =
    findFirstDirWithEnv True "XMOBAR_DATA_DIR" =<<
      sequence
          [ getXdgDirectory XdgData "xmobar"
          , getAppUserDataDirectory "xmobar"
          ]

-- | Helper function that will find the first existing directory and
-- return its path.  If none of the directories can be found,
-- optionally create and return the first from the list.  If the list
-- is empty this function returns the historical @~\/.xmobar@
-- directory.
findFirstDirOf :: Bool -> [FilePath] -> IO FilePath
findFirstDirOf create [] =
    findFirstDirOf create =<< sequence [getAppUserDataDirectory "xmobar"]
findFirstDirOf create possibles =
    go possibles >>= \case
        Just path -> pure path
        Nothing -> do
            let primary = head possibles
            primary <$ when create (createDirectoryIfMissing True primary)
  where
    go :: [FilePath] -> IO (Maybe FilePath)
    go = fmap listToMaybe . filterM doesDirectoryExist

-- | Simple wrapper around @findFirstDirOf@ that allows the primary
-- path to be specified by an environment variable.
findFirstDirWithEnv :: Bool -> String -> [FilePath] -> IO FilePath
findFirstDirWithEnv create envName paths =
    findFirstDirOf create . maybe paths (:paths) =<< lookupEnv envName

xmobarInConfigDirs :: FilePath -> IO (Maybe FilePath)
xmobarInConfigDirs fn  = do
    env <- lookupEnv "XMOBAR_CONFIG_DIR"
    xdg <- getXdgDirectory XdgConfig "xmobar"
    app <- getAppUserDataDirectory "xmobar"
    hom <- getHomeDirectory
    let candidates = case env of
                       Nothing -> [app, xdg, hom]
                       Just p  -> [p, app, xdg, hom]
    filterM (fileExist . (</> fn)) candidates <&> fmap (</> fn) . listToMaybe

xmobarConfigFile :: IO (Maybe FilePath)
xmobarConfigFile =
    traverse xmobarInConfigDirs ["xmobar.hs", ".xmobarrc", "xmobarrc"]
        <&> listToMaybe . catMaybes
